// @generated by protobuf-ts 2.8.1 with parameter long_type_string
// @generated from protobuf file "parcel-service.proto" (package "pb", syntax proto3)
// tslint:disable
import { Empty } from "./common";
import { HelloResponse } from "./common";
import { HelloRequest } from "./common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Context } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message pb.Parcel
 */
export interface Parcel {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int32 owner_id = 2;
     */
    ownerId: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp arrival_date = 3;
     */
    arrivalDate?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp picked_up_date = 4;
     */
    pickedUpDate?: Timestamp;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string transport_company = 6;
     */
    transportCompany: string;
    /**
     * @generated from protobuf field: string tracking_number = 7;
     */
    trackingNumber: string;
    /**
     * @generated from protobuf field: string sender = 8;
     */
    sender: string;
    /**
     * @generated from protobuf field: string description = 9;
     */
    description: string;
    /**
     * @generated from protobuf field: pb.ParcelStatus status = 10;
     */
    status: ParcelStatus;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 11;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 12;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message pb.GetParcelsRequest
 */
export interface GetParcelsRequest {
    /**
     * @generated from protobuf field: pb.Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: pb.GetParcelsData data = 2;
     */
    data?: GetParcelsData;
}
/**
 * @generated from protobuf message pb.GetParcelsData
 */
export interface GetParcelsData {
    /**
     * @generated from protobuf field: optional int32 owner_id = 1;
     */
    ownerId?: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp arrival_date = 2;
     */
    arrivalDate?: Timestamp;
    /**
     * @generated from protobuf field: optional string name = 3;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string transport_company = 4;
     */
    transportCompany?: string;
    /**
     * @generated from protobuf field: optional string tracking_number = 5;
     */
    trackingNumber?: string;
    /**
     * @generated from protobuf field: optional string sender = 6;
     */
    sender?: string;
    /**
     * @generated from protobuf field: optional string description = 7;
     */
    description?: string;
    /**
     * @generated from protobuf field: optional pb.ParcelStatus status = 8;
     */
    status?: ParcelStatus;
}
/**
 * @generated from protobuf message pb.GetParcelsResponse
 */
export interface GetParcelsResponse {
    /**
     * @generated from protobuf field: repeated pb.Parcel parcels = 1;
     */
    parcels: Parcel[];
}
/**
 * @generated from protobuf message pb.StudentGetParcelsRequest
 */
export interface StudentGetParcelsRequest {
    /**
     * @generated from protobuf field: pb.Context context = 1;
     */
    context?: Context;
}
/**
 * @generated from protobuf message pb.StudentGetParcelsResponse
 */
export interface StudentGetParcelsResponse {
    /**
     * @generated from protobuf field: repeated pb.Parcel parcels = 1;
     */
    parcels: Parcel[];
}
/**
 * @generated from protobuf message pb.GetParcelRequest
 */
export interface GetParcelRequest {
    /**
     * @generated from protobuf field: pb.Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: uint32 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf message pb.GetParcelResponse
 */
export interface GetParcelResponse {
    /**
     * @generated from protobuf field: pb.Parcel parcel = 1;
     */
    parcel?: Parcel;
}
/**
 * @generated from protobuf message pb.CreateParcelRequest
 */
export interface CreateParcelRequest {
    /**
     * @generated from protobuf field: pb.Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: pb.CreateParcelData data = 3;
     */
    data?: CreateParcelData;
}
/**
 * @generated from protobuf message pb.CreateParcelData
 */
export interface CreateParcelData {
    /**
     * @generated from protobuf field: int32 owner_id = 1;
     */
    ownerId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string transport_company = 3;
     */
    transportCompany: string;
    /**
     * @generated from protobuf field: string tracking_number = 4;
     */
    trackingNumber: string;
    /**
     * @generated from protobuf field: string sender = 5;
     */
    sender: string;
}
/**
 * @generated from protobuf message pb.UpdateParcelRequest
 */
export interface UpdateParcelRequest {
    /**
     * @generated from protobuf field: pb.Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: uint32 id = 2;
     */
    id: number;
    /**
     * @generated from protobuf field: pb.UpdateParcelData data = 3;
     */
    data?: UpdateParcelData;
}
/**
 * @generated from protobuf message pb.UpdateParcelData
 */
export interface UpdateParcelData {
    /**
     * @generated from protobuf field: int32 owner_id = 1;
     */
    ownerId: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp arrival_date = 2;
     */
    arrivalDate?: Timestamp;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string transport_company = 4;
     */
    transportCompany: string;
    /**
     * @generated from protobuf field: string tracking_number = 5;
     */
    trackingNumber: string;
    /**
     * @generated from protobuf field: string sender = 6;
     */
    sender: string;
    /**
     * @generated from protobuf field: pb.ParcelStatus status = 7;
     */
    status: ParcelStatus;
    /**
     * @generated from protobuf field: string description = 8;
     */
    description: string;
}
/**
 * @generated from protobuf message pb.DeleteParcelRequest
 */
export interface DeleteParcelRequest {
    /**
     * @generated from protobuf field: pb.Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: uint32 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf message pb.StaffAcceptDeliveryRequest
 */
export interface StaffAcceptDeliveryRequest {
    /**
     * @generated from protobuf field: pb.Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: uint32 id = 2;
     */
    id: number;
    /**
     * @generated from protobuf field: pb.StaffAcceptDeliveryData data = 3;
     */
    data?: StaffAcceptDeliveryData;
}
/**
 * @generated from protobuf message pb.StaffAcceptDeliveryData
 */
export interface StaffAcceptDeliveryData {
    /**
     * @generated from protobuf field: string description = 1;
     */
    description: string;
}
/**
 * @generated from protobuf message pb.StudentClaimParcelRequest
 */
export interface StudentClaimParcelRequest {
    /**
     * @generated from protobuf field: pb.Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: uint32 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf enum pb.ParcelStatus
 */
export enum ParcelStatus {
    /**
     * @generated from protobuf enum value: PARCEL_REGISTERED = 0;
     */
    PARCEL_REGISTERED = 0,
    /**
     * @generated from protobuf enum value: PARCEL_ARRIVED = 1;
     */
    PARCEL_ARRIVED = 1,
    /**
     * @generated from protobuf enum value: PARCEL_PICKED_UP = 2;
     */
    PARCEL_PICKED_UP = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Parcel$Type extends MessageType<Parcel> {
    constructor() {
        super("pb.Parcel", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "owner_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "arrival_date", kind: "message", T: () => Timestamp },
            { no: 4, name: "picked_up_date", kind: "message", T: () => Timestamp },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "transport_company", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "tracking_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "status", kind: "enum", T: () => ["pb.ParcelStatus", ParcelStatus] },
            { no: 11, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 12, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Parcel>): Parcel {
        const message = { id: 0, ownerId: 0, name: "", transportCompany: "", trackingNumber: "", sender: "", description: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Parcel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Parcel): Parcel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 owner_id */ 2:
                    message.ownerId = reader.int32();
                    break;
                case /* optional google.protobuf.Timestamp arrival_date */ 3:
                    message.arrivalDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.arrivalDate);
                    break;
                case /* optional google.protobuf.Timestamp picked_up_date */ 4:
                    message.pickedUpDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.pickedUpDate);
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string transport_company */ 6:
                    message.transportCompany = reader.string();
                    break;
                case /* string tracking_number */ 7:
                    message.trackingNumber = reader.string();
                    break;
                case /* string sender */ 8:
                    message.sender = reader.string();
                    break;
                case /* string description */ 9:
                    message.description = reader.string();
                    break;
                case /* pb.ParcelStatus status */ 10:
                    message.status = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_at */ 11:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 12:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Parcel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 owner_id = 2; */
        if (message.ownerId !== 0)
            writer.tag(2, WireType.Varint).int32(message.ownerId);
        /* optional google.protobuf.Timestamp arrival_date = 3; */
        if (message.arrivalDate)
            Timestamp.internalBinaryWrite(message.arrivalDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp picked_up_date = 4; */
        if (message.pickedUpDate)
            Timestamp.internalBinaryWrite(message.pickedUpDate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string transport_company = 6; */
        if (message.transportCompany !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.transportCompany);
        /* string tracking_number = 7; */
        if (message.trackingNumber !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.trackingNumber);
        /* string sender = 8; */
        if (message.sender !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.sender);
        /* string description = 9; */
        if (message.description !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.description);
        /* pb.ParcelStatus status = 10; */
        if (message.status !== 0)
            writer.tag(10, WireType.Varint).int32(message.status);
        /* google.protobuf.Timestamp created_at = 11; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 12; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.Parcel
 */
export const Parcel = new Parcel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParcelsRequest$Type extends MessageType<GetParcelsRequest> {
    constructor() {
        super("pb.GetParcelsRequest", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 2, name: "data", kind: "message", T: () => GetParcelsData }
        ]);
    }
    create(value?: PartialMessage<GetParcelsRequest>): GetParcelsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetParcelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParcelsRequest): GetParcelsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* pb.GetParcelsData data */ 2:
                    message.data = GetParcelsData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParcelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* pb.GetParcelsData data = 2; */
        if (message.data)
            GetParcelsData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetParcelsRequest
 */
export const GetParcelsRequest = new GetParcelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParcelsData$Type extends MessageType<GetParcelsData> {
    constructor() {
        super("pb.GetParcelsData", [
            { no: 1, name: "owner_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "arrival_date", kind: "message", T: () => Timestamp },
            { no: 3, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transport_company", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tracking_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "sender", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "status", kind: "enum", opt: true, T: () => ["pb.ParcelStatus", ParcelStatus] }
        ]);
    }
    create(value?: PartialMessage<GetParcelsData>): GetParcelsData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetParcelsData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParcelsData): GetParcelsData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 owner_id */ 1:
                    message.ownerId = reader.int32();
                    break;
                case /* optional google.protobuf.Timestamp arrival_date */ 2:
                    message.arrivalDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.arrivalDate);
                    break;
                case /* optional string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional string transport_company */ 4:
                    message.transportCompany = reader.string();
                    break;
                case /* optional string tracking_number */ 5:
                    message.trackingNumber = reader.string();
                    break;
                case /* optional string sender */ 6:
                    message.sender = reader.string();
                    break;
                case /* optional string description */ 7:
                    message.description = reader.string();
                    break;
                case /* optional pb.ParcelStatus status */ 8:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParcelsData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 owner_id = 1; */
        if (message.ownerId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.ownerId);
        /* optional google.protobuf.Timestamp arrival_date = 2; */
        if (message.arrivalDate)
            Timestamp.internalBinaryWrite(message.arrivalDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string name = 3; */
        if (message.name !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional string transport_company = 4; */
        if (message.transportCompany !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.transportCompany);
        /* optional string tracking_number = 5; */
        if (message.trackingNumber !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.trackingNumber);
        /* optional string sender = 6; */
        if (message.sender !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.sender);
        /* optional string description = 7; */
        if (message.description !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        /* optional pb.ParcelStatus status = 8; */
        if (message.status !== undefined)
            writer.tag(8, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetParcelsData
 */
export const GetParcelsData = new GetParcelsData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParcelsResponse$Type extends MessageType<GetParcelsResponse> {
    constructor() {
        super("pb.GetParcelsResponse", [
            { no: 1, name: "parcels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Parcel }
        ]);
    }
    create(value?: PartialMessage<GetParcelsResponse>): GetParcelsResponse {
        const message = { parcels: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetParcelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParcelsResponse): GetParcelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pb.Parcel parcels */ 1:
                    message.parcels.push(Parcel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParcelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pb.Parcel parcels = 1; */
        for (let i = 0; i < message.parcels.length; i++)
            Parcel.internalBinaryWrite(message.parcels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetParcelsResponse
 */
export const GetParcelsResponse = new GetParcelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudentGetParcelsRequest$Type extends MessageType<StudentGetParcelsRequest> {
    constructor() {
        super("pb.StudentGetParcelsRequest", [
            { no: 1, name: "context", kind: "message", T: () => Context }
        ]);
    }
    create(value?: PartialMessage<StudentGetParcelsRequest>): StudentGetParcelsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StudentGetParcelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudentGetParcelsRequest): StudentGetParcelsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudentGetParcelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.StudentGetParcelsRequest
 */
export const StudentGetParcelsRequest = new StudentGetParcelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudentGetParcelsResponse$Type extends MessageType<StudentGetParcelsResponse> {
    constructor() {
        super("pb.StudentGetParcelsResponse", [
            { no: 1, name: "parcels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Parcel }
        ]);
    }
    create(value?: PartialMessage<StudentGetParcelsResponse>): StudentGetParcelsResponse {
        const message = { parcels: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StudentGetParcelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudentGetParcelsResponse): StudentGetParcelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pb.Parcel parcels */ 1:
                    message.parcels.push(Parcel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudentGetParcelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pb.Parcel parcels = 1; */
        for (let i = 0; i < message.parcels.length; i++)
            Parcel.internalBinaryWrite(message.parcels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.StudentGetParcelsResponse
 */
export const StudentGetParcelsResponse = new StudentGetParcelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParcelRequest$Type extends MessageType<GetParcelRequest> {
    constructor() {
        super("pb.GetParcelRequest", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 2, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetParcelRequest>): GetParcelRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetParcelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParcelRequest): GetParcelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParcelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetParcelRequest
 */
export const GetParcelRequest = new GetParcelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParcelResponse$Type extends MessageType<GetParcelResponse> {
    constructor() {
        super("pb.GetParcelResponse", [
            { no: 1, name: "parcel", kind: "message", T: () => Parcel }
        ]);
    }
    create(value?: PartialMessage<GetParcelResponse>): GetParcelResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetParcelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParcelResponse): GetParcelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Parcel parcel */ 1:
                    message.parcel = Parcel.internalBinaryRead(reader, reader.uint32(), options, message.parcel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParcelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Parcel parcel = 1; */
        if (message.parcel)
            Parcel.internalBinaryWrite(message.parcel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetParcelResponse
 */
export const GetParcelResponse = new GetParcelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateParcelRequest$Type extends MessageType<CreateParcelRequest> {
    constructor() {
        super("pb.CreateParcelRequest", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 3, name: "data", kind: "message", T: () => CreateParcelData }
        ]);
    }
    create(value?: PartialMessage<CreateParcelRequest>): CreateParcelRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateParcelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateParcelRequest): CreateParcelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* pb.CreateParcelData data */ 3:
                    message.data = CreateParcelData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateParcelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* pb.CreateParcelData data = 3; */
        if (message.data)
            CreateParcelData.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.CreateParcelRequest
 */
export const CreateParcelRequest = new CreateParcelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateParcelData$Type extends MessageType<CreateParcelData> {
    constructor() {
        super("pb.CreateParcelData", [
            { no: 1, name: "owner_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transport_company", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tracking_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateParcelData>): CreateParcelData {
        const message = { ownerId: 0, name: "", transportCompany: "", trackingNumber: "", sender: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateParcelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateParcelData): CreateParcelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 owner_id */ 1:
                    message.ownerId = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string transport_company */ 3:
                    message.transportCompany = reader.string();
                    break;
                case /* string tracking_number */ 4:
                    message.trackingNumber = reader.string();
                    break;
                case /* string sender */ 5:
                    message.sender = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateParcelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 owner_id = 1; */
        if (message.ownerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.ownerId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string transport_company = 3; */
        if (message.transportCompany !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transportCompany);
        /* string tracking_number = 4; */
        if (message.trackingNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.trackingNumber);
        /* string sender = 5; */
        if (message.sender !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.sender);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.CreateParcelData
 */
export const CreateParcelData = new CreateParcelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateParcelRequest$Type extends MessageType<UpdateParcelRequest> {
    constructor() {
        super("pb.UpdateParcelRequest", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 2, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data", kind: "message", T: () => UpdateParcelData }
        ]);
    }
    create(value?: PartialMessage<UpdateParcelRequest>): UpdateParcelRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateParcelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateParcelRequest): UpdateParcelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                case /* pb.UpdateParcelData data */ 3:
                    message.data = UpdateParcelData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateParcelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint32(message.id);
        /* pb.UpdateParcelData data = 3; */
        if (message.data)
            UpdateParcelData.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.UpdateParcelRequest
 */
export const UpdateParcelRequest = new UpdateParcelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateParcelData$Type extends MessageType<UpdateParcelData> {
    constructor() {
        super("pb.UpdateParcelData", [
            { no: 1, name: "owner_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "arrival_date", kind: "message", T: () => Timestamp },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transport_company", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tracking_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "status", kind: "enum", T: () => ["pb.ParcelStatus", ParcelStatus] },
            { no: 8, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateParcelData>): UpdateParcelData {
        const message = { ownerId: 0, name: "", transportCompany: "", trackingNumber: "", sender: "", status: 0, description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateParcelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateParcelData): UpdateParcelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 owner_id */ 1:
                    message.ownerId = reader.int32();
                    break;
                case /* google.protobuf.Timestamp arrival_date */ 2:
                    message.arrivalDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.arrivalDate);
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string transport_company */ 4:
                    message.transportCompany = reader.string();
                    break;
                case /* string tracking_number */ 5:
                    message.trackingNumber = reader.string();
                    break;
                case /* string sender */ 6:
                    message.sender = reader.string();
                    break;
                case /* pb.ParcelStatus status */ 7:
                    message.status = reader.int32();
                    break;
                case /* string description */ 8:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateParcelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 owner_id = 1; */
        if (message.ownerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.ownerId);
        /* google.protobuf.Timestamp arrival_date = 2; */
        if (message.arrivalDate)
            Timestamp.internalBinaryWrite(message.arrivalDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string transport_company = 4; */
        if (message.transportCompany !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.transportCompany);
        /* string tracking_number = 5; */
        if (message.trackingNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.trackingNumber);
        /* string sender = 6; */
        if (message.sender !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.sender);
        /* pb.ParcelStatus status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* string description = 8; */
        if (message.description !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.UpdateParcelData
 */
export const UpdateParcelData = new UpdateParcelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteParcelRequest$Type extends MessageType<DeleteParcelRequest> {
    constructor() {
        super("pb.DeleteParcelRequest", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 2, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteParcelRequest>): DeleteParcelRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteParcelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteParcelRequest): DeleteParcelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteParcelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.DeleteParcelRequest
 */
export const DeleteParcelRequest = new DeleteParcelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StaffAcceptDeliveryRequest$Type extends MessageType<StaffAcceptDeliveryRequest> {
    constructor() {
        super("pb.StaffAcceptDeliveryRequest", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 2, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data", kind: "message", T: () => StaffAcceptDeliveryData }
        ]);
    }
    create(value?: PartialMessage<StaffAcceptDeliveryRequest>): StaffAcceptDeliveryRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StaffAcceptDeliveryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StaffAcceptDeliveryRequest): StaffAcceptDeliveryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                case /* pb.StaffAcceptDeliveryData data */ 3:
                    message.data = StaffAcceptDeliveryData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StaffAcceptDeliveryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint32(message.id);
        /* pb.StaffAcceptDeliveryData data = 3; */
        if (message.data)
            StaffAcceptDeliveryData.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.StaffAcceptDeliveryRequest
 */
export const StaffAcceptDeliveryRequest = new StaffAcceptDeliveryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StaffAcceptDeliveryData$Type extends MessageType<StaffAcceptDeliveryData> {
    constructor() {
        super("pb.StaffAcceptDeliveryData", [
            { no: 1, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StaffAcceptDeliveryData>): StaffAcceptDeliveryData {
        const message = { description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StaffAcceptDeliveryData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StaffAcceptDeliveryData): StaffAcceptDeliveryData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description */ 1:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StaffAcceptDeliveryData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description = 1; */
        if (message.description !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.StaffAcceptDeliveryData
 */
export const StaffAcceptDeliveryData = new StaffAcceptDeliveryData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudentClaimParcelRequest$Type extends MessageType<StudentClaimParcelRequest> {
    constructor() {
        super("pb.StudentClaimParcelRequest", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 2, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StudentClaimParcelRequest>): StudentClaimParcelRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StudentClaimParcelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudentClaimParcelRequest): StudentClaimParcelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudentClaimParcelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.StudentClaimParcelRequest
 */
export const StudentClaimParcelRequest = new StudentClaimParcelRequest$Type();
/**
 * @generated ServiceType for protobuf service pb.ParcelService
 */
export const ParcelService = new ServiceType("pb.ParcelService", [
    { name: "Hello", options: {}, I: HelloRequest, O: HelloResponse },
    { name: "GetParcels", options: {}, I: GetParcelsRequest, O: GetParcelsResponse },
    { name: "StudentGetParcels", options: {}, I: StudentGetParcelsRequest, O: StudentGetParcelsResponse },
    { name: "GetParcel", options: {}, I: GetParcelRequest, O: GetParcelResponse },
    { name: "CreateParcel", options: {}, I: CreateParcelRequest, O: Empty },
    { name: "UpdateParcel", options: {}, I: UpdateParcelRequest, O: Empty },
    { name: "DeleteParcel", options: {}, I: DeleteParcelRequest, O: Empty },
    { name: "StaffAcceptDelivery", options: {}, I: StaffAcceptDeliveryRequest, O: Empty },
    { name: "StudentClaimParcel", options: {}, I: StudentClaimParcelRequest, O: Empty }
]);
